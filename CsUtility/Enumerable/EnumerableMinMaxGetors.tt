<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<# 

var types = new List<(string typeName, bool IsNullable, bool HasIsNaN)>()
{
        ("sbyte",false, false),
        ("sbyte?",true , false),
        ("byte",false, false),
        ("byte?",true , false),
        ("char",false, false),
        ("char?",true , false),
        ("short",false, false),
        ("short?",true , false),
        ("ushort",false, false),
        ("ushort?",true , false),
        ("int",false, false),
        ("int?",true , false),
        ("uint",false, false),
        ("uint?",true , false),
        ("long",false, false),
        ("long?",true , false),
        ("ulong",false, false),
        ("ulong?",true , false),
        ("float",false, true),
        ("float?",true , true),
        ("double",false, true),
        ("double?",true , true),
        ("decimal",false, false),
        ("decimal?",true , false),
};

var minMaxDic = new Dictionary<string,string>(){{"Min","<"}, {"Max",">"} };
#>

using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;

namespace CsUtility.Enumerable
{

    public static partial class EnumerableUtilities
    {
    
<# foreach(var opr in minMaxDic){ #>
        #region <#= opr.Key #>Item
<# foreach(var (typeName, isNullable, hasIsNaN) in types){ #>
        public static TSource <#= opr.Key #>Item<TSource>(this IEnumerable<TSource> source, Func<TSource, <#= typeName #>> keySelector)
        {
            if (source == null) throw new ArgumentNullException("source");
            <#= typeName #> value = default(<#= typeName #>);
            bool hasValue = false;
            TSource obj = default(TSource);
            foreach (TSource item in source)
            {
                if (hasValue)
                {
                    <#= typeName #> x = keySelector(item);
                    <# if(isNullable){ #>if( x == null) continue; <# } #>

<#
                       var oprText = "";
                       if(isNullable) oprText += "value == null || " ;
                       oprText += $"x {opr.Value} value ";
                       if (hasIsNaN)
                       {
                           var turgetVal = (opr.Key == "Max") ? "value" : "x";
                           if (isNullable) turgetVal += ".Value";
                           oprText += $" || {typeName.TrimEnd('?')}.IsNaN({turgetVal})";
                       }
#>
                    if (<#= oprText #>)
                    {
                        value = x;
                        obj = item;
                    }
                }
                else
                {
                    value = keySelector(item);
                    hasValue = true;
                    obj = item;
                }
            }
            if (hasValue) return obj;
            throw new ArgumentException("No element");
        }

<# } #>
        #endregion

<# } #>
        #region MinMax
<# foreach(var (typeName, isNullable, hasIsNaN) in types){ #>
        public static MinMaxPair<<#= typeName #>> MinMax<TSource>(this IEnumerable<TSource> source, Func<TSource, <#= typeName #>> selector) 
        {
            return MinMax(System.Linq.Enumerable.Select(source, selector));
        }

<# } #>


<# foreach(var (typeName, isNullable, hasIsNaN) in types){ #>
        public static MinMaxPair<<#= typeName #>> MinMax(this IEnumerable<<#= typeName #>> source) 
        {
            if (source == null) throw new ArgumentNullException("source");
            <#= typeName #> min = default(<#= typeName #>);
            <#= typeName #> max = default(<#= typeName #>);
            bool hasValue = false;
            foreach (<#= typeName #> x in source) 
            {
                if (hasValue) 
                {
                    <# if(isNullable){ #>if( x == null) continue; <# } #>
<# 
                       var minOprText = "";
                       if(isNullable) minOprText += " min == null || " ;
                       minOprText += $"x < min ";
                       var turgetVal = isNullable ? ".Value" : "";
                       if(hasIsNaN) minOprText += $" || {typeName.TrimEnd('?')}.IsNaN(x{turgetVal})";
                       
                       var maxOprText = "";
                       if(isNullable) maxOprText += " max == null || " ;
                       maxOprText += $"x > max ";
                       if(hasIsNaN) maxOprText += $" || {typeName.TrimEnd('?')}.IsNaN(max{turgetVal})";
#> 
                    if (<#= minOprText #>) min = x;
                    if (<#= maxOprText #>) max = x;
                }
                else 
                {
                    min = x;
                    max = x;
                    hasValue = true;
                }
            }
            if (hasValue) return new MinMaxPair<<#= typeName #>>(min, max);
            throw new ArgumentException("No element");
        }
<# } #>
        
        #endregion

        #region MinMaxItem

<# foreach(var (typeName, isNullable, hasIsNaN) in types){ #>
        public static MinMaxPair<TSource> MinMaxItem<TSource>(this IEnumerable<TSource> source, Func<TSource, <#= typeName #>> selector) 
        {
            if (source == null) throw new ArgumentNullException("source");
            <#= typeName #> min = default(<#= typeName #>);
            <#= typeName #> max = default(<#= typeName #>);
            TSource minItem = default(TSource);
            TSource maxItem = default(TSource);
            bool hasValue = false;
            <#= typeName #> x;
            foreach (TSource item in source) 
            {
                x = selector(item);
                if (hasValue) 
                {
                    <# if(isNullable){ #>if( x == null)continue; <# } #>
<# 
                       var minOprText = "";
                       if(isNullable) minOprText += " min == null || " ;
                       minOprText += $"x < min ";
                       var turgetVal = isNullable ? ".Value" : "";
                       if(hasIsNaN) minOprText += $" || {typeName.TrimEnd('?')}.IsNaN(x{turgetVal})";
                       
                       var maxOprText = "";
                       if(isNullable) maxOprText += " max == null || " ;
                       maxOprText += $"x > max ";
                       if(hasIsNaN) maxOprText += $" || {typeName.TrimEnd('?')}.IsNaN(max{turgetVal})";
#> 
                    if (<#= minOprText #>) {min = x; minItem = item;}
                    if (<#= maxOprText #>) {max = x; maxItem = item;}
                }
                else 
                {
                    hasValue = true;
                    min = x;
                    minItem = item;
                    max = x;
                    maxItem = item;
                }
            }
            if (hasValue) return new MinMaxPair<TSource>(minItem, maxItem);
            throw new ArgumentException("No element");
        }

<# } #>
        #endregion
    }
}